#include !"global.csv"
#include !"tracking_loops.csv"
#include !"channel.csv"
#include !"subchannel.csv"
#include !"ca_upsampler.csv"

//Operating parameters.
FLL_IQ_SHIFT,11,Amount to which IQ values are shifted before operation.
FLL_CLK_COUNT,10,Division clock divider (must be even).
FLL_DIV_SETUP,5,Length (in cycles) of required division setup time.
FLL_DIV_STABLE,4,Length (in cycles) before division result stabilizes.
FLL_MAX_ROT_ANGLE,5,Maximum expected rotation angle (in degrees).

FLL_BW,10,FLL bandwidth (in Hz).
FLL_CONST_SHIFT,2,FLL parameter fixed-point shift.
FLL_A,round(((1.89*FLL_BW)^2)*2^FLL_CONST_SHIFT),A_FLL contant.
FLL_B,round(sqrt(2)*1.89*FLL_BW*2^FLL_CONST_SHIFT),B_FLL contant.

//Clock divider counter.
FLL_CLK_MAX,ceil(FLL_CLK_COUNT/2)-1,Division clock counter max value.
FLL_CLK_WIDTH,max_width(FLL_CLK_MAX),Division clock counter width.
FLL_CLK_RANGE,FLL_CLK_WIDTH-1:0,Division clock counter bit range.

//Tracking loop parameters.
ACC_WIDTH_TRACK,@
ACC_RANGE_TRACK,@
I2Q2_WIDTH_TRACK,@
I2Q2_RANGE_TRACK,@
IQ_WIDTH,@
IQ_RANGE,@
ANGLE_SHIFT,@
DOPPLER_SHIFT_WIDTH,@
DOPPLER_SHIFT_RANGE,@

//Doppler shift drift rate.
DOPPLER_SHIFT_DOT_MAX_VAL,round(3*FLL_MAX_ROT_ANGLE*(FLL_A/2^FLL_CONST_SHIFT)*2^ANGLE_SHIFT),Approximate expected maximum wdfdot value (in Hz/s).
DOPPLER_SHIFT_DOT_WIDTH,max_width(DOPPLER_SHIFT_DOT_MAX_VAL),Expected maximum wdfdot width.
DOPPLER_SHIFT_DOT_RANGE,DOPPLER_SHIFT_DOT_WIDTH-1:0,Expected maximum wdfdot range.

//Numerator size.
FLL_NUM_WIDTH,I2Q2_WIDTH_TRACK+ANGLE_SHIFT,FLL numerator width.
FLL_NUM_RANGE,FLL_NUM_WIDTH-1:0,FLL numerator range.

//Parameter setup state machine.
FLL_STATE_MAX_VAL,15,Maximum FLL setup state value.
FLL_STATE_WIDTH,max_width(FLL_STATE_MAX_VAL),FLL state variable width.
FLL_STATE_RANGE,FLL_STATE_WIDTH-1:0,FLL state variable range.
FLL_STATE_IDLE,FLL_STATE_WIDTH'd15,FLL idle.
FLL_STATE_0,FLL_STATE_WIDTH'd0,Multiply Q_k*I_km1.
FLL_STATE_1,FLL_STATE_WIDTH'd1,Multiply Q_k*I_km1 (second cycle).
FLL_STATE_2,FLL_STATE_WIDTH'd2,Multiply I_k*Q_km1.
FLL_STATE_3,FLL_STATE_WIDTH'd3,Multiply I_k*Q_km1 (second cycle).
FLL_STATE_4,FLL_STATE_WIDTH'd4,Multiply IQ_k*IQ_km1 and compute numerator.
FLL_STATE_5,FLL_STATE_WIDTH'd5,Multiply IQ_k*IQ_km1 (second cycle).
FLL_STATE_6,FLL_STATE_WIDTH'd6,Perform division to resolve rotation angle.
FLL_STATE_7,FLL_STATE_WIDTH'd7,Compute wdfdot_kp1.
FLL_STATE_8,FLL_STATE_WIDTH'd8,Compute wdfdot_kp1 (second cycle).
FLL_STATE_9,FLL_STATE_WIDTH'd9,Compute wdf_kp1.
FLL_STATE_10,FLL_STATE_WIDTH'd10,Compute wdf_kp1 (second cycle).
FLL_STATE_11,FLL_STATE_WIDTH'd11,Compute wdf_kp1 (third cycle).
FLL_STATE_12,FLL_STATE_WIDTH'd12,Compute Doppler phase increment change.
FLL_STATE_13,FLL_STATE_WIDTH'd13,Compute Doppler phase increment change (second cycle).
FLL_STATE_14,FLL_STATE_WIDTH'd14,Retrieve final result.