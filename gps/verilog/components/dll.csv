#include !"global.csv"
#include !"tracking_loops.csv"
#include !"channel.csv"
#include !"subchannel.csv"
#include !"ca_upsampler.csv"

//Operating parameters.
DLL_IQ_SHIFT,5,Amount to which IQ values are shifted before operation.
DLL_CLK_COUNT,6,Division clock divider (must be even).
DLL_DIV_SETUP,4,Length (in cycles) of required division setup time.
DLL_DIV_STABLE,3,Length (in cycles) before division result stabilizes.
DLL_SCALE_SHIFT,0,DLL fixed-point scale factor shift.
DLL_HNUM,5.8e-7,DLL convergence factor.

//Clock divider counter.
DLL_CLK_MAX,ceil(DLL_CLK_COUNT/2)-1,Division clock counter max value.
DLL_CLK_WIDTH,max_width(DLL_CLK_MAX),Division clock counter width.
DLL_CLK_RANGE,DLL_CLK_WIDTH-1:0,Division clock counter bit range.

//Sequence cycle times:
//  --Operand (eml,epl) calculation = 1 cycle
//  --Priority encoder = 3 cycles
//  --Truncation = 1 cycle
//  --Multiplication = 2 cycles
//  --Division setup = DLL_DIV_SETUP cycles
//  --Division = DLL_CLK_COUNT cycles
//  --Division stabilization = DLL_DIV_STABLE cycles
DIV_CLOCK_DELAY,7+DLL_DIV_SETUP,Cycles until divide starts.
TOTAL_DELAY_LENGTH,DLL_CLK_COUNT+DIV_CLOCK_DELAY+DLL_DIV_STABLE,Total cycles from start to finish.

//Pre-truncation operand width and index width.
DLL_OP_PRE_WIDTH,max_width(IQ_MAX_VAL*2),Operand width before truncation.
DLL_OP_PRE_RANGE,DLL_OP_PRE_WIDTH-1:0,Operand range before truncation.
DLL_OP_INDEX_WIDTH,max_width(DLL_OP_PRE_WIDTH-1),Operand bit index width.
DLL_OP_INDEX_RANGE,DLL_OP_INDEX_WIDTH-1:0,Operand bit index range.

//IQ value truncation.
DLL_OP_WIDTH,IQ_WIDTH-DLL_IQ_SHIFT,IQ sum and difference operand widths.
DLL_OP_RANGE,DLL_OP_WIDTH-1:0,IQ operand bit range.
DLL_TRUNC_RANGE,IQ_WIDTH-1:IQ_WIDTH-DLL_IQ_SHIFT,Truncated bit range for operands.

//Fixed-point DLL amplitude scale factor.
DLL_SCALE_VAL,round((2^CA_ACC_WIDTH)*(2-CHIPS_EML)*F_S/F_CA/2*DLL_HNUM*2^DLL_SCALE_SHIFT),Amplitude scale factor.
DLL_SCALE_WIDTH,max_width(DLL_SCALE_VAL),Amplitude scale factor width.
DLL_SCALE,DLL_SCALE_WIDTH'dDLL_SCALE_VAL,Amplitude scale factor constant.

//Multiplication result width.
DLL_MULT_OUTPUT_WIDTH,DLL_OP_WIDTH+DLL_SCALE_WIDTH,Scaled result width, before shift.
DLL_MULT_OUTPUT_RANGE,DLL_MULT_OUTPUT_WIDTH-1:0,Scaled result range, before shift.

//Phase increment offset.
DLL_DPHI_WIDTH,DLL_MULT_OUTPUT_WIDTH-DLL_SCALE_SHIFT+1,Phase increment offset width (two's complement).
DLL_DPHI_RANGE,DLL_DPHI_WIDTH-1:0,Phase increment offset range.