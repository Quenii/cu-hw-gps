// megafunction wizard: %LPM_DIVIDE%
// GENERATION: STANDARD
// VERSION: WM1.0
// MODULE: lpm_divide 

// ============================================================
// File Name: divider.v
// Megafunction Name(s):
// 			lpm_divide
//
// Simulation Library Files(s):
// 			lpm
// ============================================================
// ************************************************************
// THIS IS A WIZARD-GENERATED FILE. DO NOT EDIT THIS FILE!
//
// 8.0 Build 215 05/29/2008 SJ Full Version
// ************************************************************


//Copyright (C) 1991-2008 Altera Corporation
//Your use of Altera Corporation's design tools, logic functions 
//and other software and tools, and its AMPP partner logic 
//functions, and any output files from any of the foregoing 
//(including device programming or simulation files), and any 
//associated documentation or information are expressly subject 
//to the terms and conditions of the Altera Program License 
//Subscription Agreement, Altera MegaCore Function License 
//Agreement, or other applicable license agreement, including, 
//without limitation, that your use is for the sole purpose of 
//programming logic devices manufactured by Altera and sold by 
//Altera or its authorized distributors.  Please refer to the 
//applicable agreement for further details.


//lpm_divide DEVICE_FAMILY="Cyclone II" LPM_DREPRESENTATION="UNSIGNED" LPM_NREPRESENTATION="UNSIGNED" LPM_PIPELINE=2 LPM_REMAINDERPOSITIVE="TRUE" LPM_WIDTHD=11 LPM_WIDTHN=19 MAXIMIZE_SPEED=6 clock denom numer quotient remain
//VERSION_BEGIN 8.0 cbx_cycloneii 2008:02:23:252825 cbx_lpm_abs 2008:02:23:252825 cbx_lpm_add_sub 2008:03:09:257947 cbx_lpm_divide 2008:03:31:268907 cbx_mgl 2008:04:11:273944 cbx_stratix 2008:02:23:252825 cbx_stratixii 2008:02:23:252825 cbx_util_mgl 2008:04:15:275689  VERSION_END
// synthesis VERILOG_INPUT_VERSION VERILOG_2001
// altera message_off 10463



//sign_div_unsign DEN_REPRESENTATION="UNSIGNED" DEN_WIDTH=11 LPM_PIPELINE=2 MAXIMIZE_SPEED=6 NUM_REPRESENTATION="UNSIGNED" NUM_WIDTH=19 SKIP_BITS=0 clock denominator numerator quotient remainder
//VERSION_BEGIN 8.0 cbx_cycloneii 2008:02:23:252825 cbx_lpm_abs 2008:02:23:252825 cbx_lpm_add_sub 2008:03:09:257947 cbx_lpm_divide 2008:03:31:268907 cbx_mgl 2008:04:11:273944 cbx_stratix 2008:02:23:252825 cbx_stratixii 2008:02:23:252825 cbx_util_mgl 2008:04:15:275689  VERSION_END


//alt_u_div DEVICE_FAMILY="Cyclone II" LPM_PIPELINE=2 MAXIMIZE_SPEED=6 SKIP_BITS=0 WIDTH_D=11 WIDTH_N=19 WIDTH_Q=19 WIDTH_R=11 clock denominator numerator quotient remainder
//VERSION_BEGIN 8.0 cbx_cycloneii 2008:02:23:252825 cbx_lpm_abs 2008:02:23:252825 cbx_lpm_add_sub 2008:03:09:257947 cbx_lpm_divide 2008:03:31:268907 cbx_mgl 2008:04:11:273944 cbx_stratix 2008:02:23:252825 cbx_stratixii 2008:02:23:252825 cbx_util_mgl 2008:04:15:275689  VERSION_END


//lpm_add_sub DEVICE_FAMILY="Cyclone II" LPM_DIRECTION="SUB" LPM_WIDTH=1 cout dataa datab result
//VERSION_BEGIN 8.0 cbx_cycloneii 2008:02:23:252825 cbx_lpm_add_sub 2008:03:09:257947 cbx_mgl 2008:04:11:273944 cbx_stratix 2008:02:23:252825 cbx_stratixii 2008:02:23:252825  VERSION_END

//synthesis_resources = 
//synopsys translate_off
`timescale 1 ps / 1 ps
//synopsys translate_on
module  divider_add_sub
	( 
	cout,
	dataa,
	datab,
	result) /* synthesis synthesis_clearbox=1 */;
	output   cout;
	input   [0:0]  dataa;
	input   [0:0]  datab;
	output   [0:0]  result;

	wire  [0:0]  carry_eqn;
	wire  cin_wire;
	wire  [0:0]  datab_node;
	wire  [0:0]  sum_eqn;

	assign
		carry_eqn = {((dataa[0] & datab_node[0]) | ((dataa[0] | datab_node[0]) & cin_wire))},
		cin_wire = 1'b1,
		cout = carry_eqn[0],
		datab_node = (~ datab),
		result = sum_eqn,
		sum_eqn = {((dataa[0] ^ datab_node[0]) ^ cin_wire)};
endmodule //divider_add_sub


//lpm_add_sub DEVICE_FAMILY="Cyclone II" LPM_DIRECTION="SUB" LPM_WIDTH=2 cout dataa datab result
//VERSION_BEGIN 8.0 cbx_cycloneii 2008:02:23:252825 cbx_lpm_add_sub 2008:03:09:257947 cbx_mgl 2008:04:11:273944 cbx_stratix 2008:02:23:252825 cbx_stratixii 2008:02:23:252825  VERSION_END

//synthesis_resources = 
//synopsys translate_off
`timescale 1 ps / 1 ps
//synopsys translate_on
module  divider_add_sub1
	( 
	cout,
	dataa,
	datab,
	result) /* synthesis synthesis_clearbox=1 */;
	output   cout;
	input   [1:0]  dataa;
	input   [1:0]  datab;
	output   [1:0]  result;

	wire  [1:0]  carry_eqn;
	wire  cin_wire;
	wire  [1:0]  datab_node;
	wire  [1:0]  sum_eqn;

	assign
		carry_eqn = {((dataa[1] & datab_node[1]) | ((dataa[1] | datab_node[1]) & carry_eqn[0])), ((dataa[0] & datab_node[0]) | ((dataa[0] | datab_node[0]) & cin_wire))},
		cin_wire = 1'b1,
		cout = carry_eqn[1],
		datab_node = (~ datab),
		result = sum_eqn,
		sum_eqn = {((dataa[1] ^ datab_node[1]) ^ carry_eqn[0]), ((dataa[0] ^ datab_node[0]) ^ cin_wire)};
endmodule //divider_add_sub1


//lpm_add_sub DEVICE_FAMILY="Cyclone II" LPM_DIRECTION="SUB" LPM_WIDTH=11 cout dataa datab result
//VERSION_BEGIN 8.0 cbx_cycloneii 2008:02:23:252825 cbx_lpm_add_sub 2008:03:09:257947 cbx_mgl 2008:04:11:273944 cbx_stratix 2008:02:23:252825 cbx_stratixii 2008:02:23:252825  VERSION_END


//lpm_add_sub DEVICE_FAMILY="Cyclone II" LPM_DIRECTION="SUB" LPM_WIDTH=12 cout dataa datab result
//VERSION_BEGIN 8.0 cbx_cycloneii 2008:02:23:252825 cbx_lpm_add_sub 2008:03:09:257947 cbx_mgl 2008:04:11:273944 cbx_stratix 2008:02:23:252825 cbx_stratixii 2008:02:23:252825  VERSION_END


//lpm_add_sub DEVICE_FAMILY="Cyclone II" LPM_DIRECTION="SUB" LPM_WIDTH=12 cout dataa datab result
//VERSION_BEGIN 8.0 cbx_cycloneii 2008:02:23:252825 cbx_lpm_add_sub 2008:03:09:257947 cbx_mgl 2008:04:11:273944 cbx_stratix 2008:02:23:252825 cbx_stratixii 2008:02:23:252825  VERSION_END


//lpm_add_sub DEVICE_FAMILY="Cyclone II" LPM_DIRECTION="SUB" LPM_WIDTH=12 cout dataa datab result
//VERSION_BEGIN 8.0 cbx_cycloneii 2008:02:23:252825 cbx_lpm_add_sub 2008:03:09:257947 cbx_mgl 2008:04:11:273944 cbx_stratix 2008:02:23:252825 cbx_stratixii 2008:02:23:252825  VERSION_END


//lpm_add_sub DEVICE_FAMILY="Cyclone II" LPM_DIRECTION="SUB" LPM_WIDTH=12 cout dataa datab result
//VERSION_BEGIN 8.0 cbx_cycloneii 2008:02:23:252825 cbx_lpm_add_sub 2008:03:09:257947 cbx_mgl 2008:04:11:273944 cbx_stratix 2008:02:23:252825 cbx_stratixii 2008:02:23:252825  VERSION_END


//lpm_add_sub DEVICE_FAMILY="Cyclone II" LPM_DIRECTION="SUB" LPM_WIDTH=12 cout dataa datab result
//VERSION_BEGIN 8.0 cbx_cycloneii 2008:02:23:252825 cbx_lpm_add_sub 2008:03:09:257947 cbx_mgl 2008:04:11:273944 cbx_stratix 2008:02:23:252825 cbx_stratixii 2008:02:23:252825  VERSION_END


//lpm_add_sub DEVICE_FAMILY="Cyclone II" LPM_DIRECTION="SUB" LPM_WIDTH=12 cout dataa datab result
//VERSION_BEGIN 8.0 cbx_cycloneii 2008:02:23:252825 cbx_lpm_add_sub 2008:03:09:257947 cbx_mgl 2008:04:11:273944 cbx_stratix 2008:02:23:252825 cbx_stratixii 2008:02:23:252825  VERSION_END


//lpm_add_sub DEVICE_FAMILY="Cyclone II" LPM_DIRECTION="SUB" LPM_WIDTH=12 cout dataa datab result
//VERSION_BEGIN 8.0 cbx_cycloneii 2008:02:23:252825 cbx_lpm_add_sub 2008:03:09:257947 cbx_mgl 2008:04:11:273944 cbx_stratix 2008:02:23:252825 cbx_stratixii 2008:02:23:252825  VERSION_END


//lpm_add_sub DEVICE_FAMILY="Cyclone II" LPM_DIRECTION="SUB" LPM_WIDTH=12 cout dataa datab result
//VERSION_BEGIN 8.0 cbx_cycloneii 2008:02:23:252825 cbx_lpm_add_sub 2008:03:09:257947 cbx_mgl 2008:04:11:273944 cbx_stratix 2008:02:23:252825 cbx_stratixii 2008:02:23:252825  VERSION_END


//lpm_add_sub DEVICE_FAMILY="Cyclone II" LPM_DIRECTION="SUB" LPM_WIDTH=3 cout dataa datab result
//VERSION_BEGIN 8.0 cbx_cycloneii 2008:02:23:252825 cbx_lpm_add_sub 2008:03:09:257947 cbx_mgl 2008:04:11:273944 cbx_stratix 2008:02:23:252825 cbx_stratixii 2008:02:23:252825  VERSION_END


//lpm_add_sub DEVICE_FAMILY="Cyclone II" LPM_DIRECTION="SUB" LPM_WIDTH=4 cout dataa datab result
//VERSION_BEGIN 8.0 cbx_cycloneii 2008:02:23:252825 cbx_lpm_add_sub 2008:03:09:257947 cbx_mgl 2008:04:11:273944 cbx_stratix 2008:02:23:252825 cbx_stratixii 2008:02:23:252825  VERSION_END


//lpm_add_sub DEVICE_FAMILY="Cyclone II" LPM_DIRECTION="SUB" LPM_WIDTH=5 cout dataa datab result
//VERSION_BEGIN 8.0 cbx_cycloneii 2008:02:23:252825 cbx_lpm_add_sub 2008:03:09:257947 cbx_mgl 2008:04:11:273944 cbx_stratix 2008:02:23:252825 cbx_stratixii 2008:02:23:252825  VERSION_END


//lpm_add_sub DEVICE_FAMILY="Cyclone II" LPM_DIRECTION="SUB" LPM_WIDTH=6 cout dataa datab result
//VERSION_BEGIN 8.0 cbx_cycloneii 2008:02:23:252825 cbx_lpm_add_sub 2008:03:09:257947 cbx_mgl 2008:04:11:273944 cbx_stratix 2008:02:23:252825 cbx_stratixii 2008:02:23:252825  VERSION_END


//lpm_add_sub DEVICE_FAMILY="Cyclone II" LPM_DIRECTION="SUB" LPM_WIDTH=7 cout dataa datab result
//VERSION_BEGIN 8.0 cbx_cycloneii 2008:02:23:252825 cbx_lpm_add_sub 2008:03:09:257947 cbx_mgl 2008:04:11:273944 cbx_stratix 2008:02:23:252825 cbx_stratixii 2008:02:23:252825  VERSION_END


//lpm_add_sub DEVICE_FAMILY="Cyclone II" LPM_DIRECTION="SUB" LPM_WIDTH=8 cout dataa datab result
//VERSION_BEGIN 8.0 cbx_cycloneii 2008:02:23:252825 cbx_lpm_add_sub 2008:03:09:257947 cbx_mgl 2008:04:11:273944 cbx_stratix 2008:02:23:252825 cbx_stratixii 2008:02:23:252825  VERSION_END


//lpm_add_sub DEVICE_FAMILY="Cyclone II" LPM_DIRECTION="SUB" LPM_WIDTH=9 cout dataa datab result
//VERSION_BEGIN 8.0 cbx_cycloneii 2008:02:23:252825 cbx_lpm_add_sub 2008:03:09:257947 cbx_mgl 2008:04:11:273944 cbx_stratix 2008:02:23:252825 cbx_stratixii 2008:02:23:252825  VERSION_END


//lpm_add_sub DEVICE_FAMILY="Cyclone II" LPM_DIRECTION="SUB" LPM_WIDTH=10 cout dataa datab result
//VERSION_BEGIN 8.0 cbx_cycloneii 2008:02:23:252825 cbx_lpm_add_sub 2008:03:09:257947 cbx_mgl 2008:04:11:273944 cbx_stratix 2008:02:23:252825 cbx_stratixii 2008:02:23:252825  VERSION_END

//synthesis_resources = lut 176 reg 122 
//synopsys translate_off
`timescale 1 ps / 1 ps
//synopsys translate_on
module  divider_alt_u_div
	( 
	clock,
	denominator,
	numerator,
	quotient,
	remainder) /* synthesis synthesis_clearbox=1 */
		/* synthesis ALTERA_ATTRIBUTE="{-to DFFQuotient[0]} POWER_UP_LEVEL=HIGH;{-to DFFQuotient[1]} POWER_UP_LEVEL=HIGH;{-to DFFQuotient[2]} POWER_UP_LEVEL=HIGH;{-to DFFQuotient[3]} POWER_UP_LEVEL=HIGH;{-to DFFQuotient[4]} POWER_UP_LEVEL=HIGH;{-to DFFQuotient[5]} POWER_UP_LEVEL=HIGH;{-to DFFQuotient[6]} POWER_UP_LEVEL=HIGH;{-to DFFQuotient[7]} POWER_UP_LEVEL=HIGH;{-to DFFQuotient[8]} POWER_UP_LEVEL=HIGH;{-to DFFQuotient[9]} POWER_UP_LEVEL=HIGH;{-to DFFQuotient[10]} POWER_UP_LEVEL=HIGH;{-to DFFQuotient[11]} POWER_UP_LEVEL=HIGH;{-to DFFQuotient[12]} POWER_UP_LEVEL=HIGH;{-to DFFQuotient[13]} POWER_UP_LEVEL=HIGH;{-to DFFQuotient[14]} POWER_UP_LEVEL=LOW;{-to DFFQuotient[15]} POWER_UP_LEVEL=LOW;{-to DFFQuotient[16]} POWER_UP_LEVEL=LOW;{-to DFFQuotient[17]} POWER_UP_LEVEL=LOW;{-to DFFQuotient[18]} POWER_UP_LEVEL=LOW;{-to DFFQuotient[19]} POWER_UP_LEVEL=HIGH",
		"{-to DFFQuotient[20]} POWER_UP_LEVEL=HIGH;{-to DFFQuotient[21]} POWER_UP_LEVEL=HIGH;{-to DFFQuotient[22]} POWER_UP_LEVEL=HIGH;{-to DFFQuotient[23]} POWER_UP_LEVEL=LOW;{-to DFFQuotient[24]} POWER_UP_LEVEL=LOW;{-to DFFQuotient[25]} POWER_UP_LEVEL=LOW;{-to DFFQuotient[26]} POWER_UP_LEVEL=LOW;{-to DFFQuotient[27]} POWER_UP_LEVEL=LOW;{-to DFFQuotient[28]} POWER_UP_LEVEL=LOW;{-to DFFQuotient[29]} POWER_UP_LEVEL=LOW;{-to DFFQuotient[30]} POWER_UP_LEVEL=LOW;{-to DFFQuotient[31]} POWER_UP_LEVEL=LOW;{-to DFFQuotient[32]} POWER_UP_LEVEL=LOW;{-to DFFQuotient[33]} POWER_UP_LEVEL=LOW;{-to DFFQuotient[34]} POWER_UP_LEVEL=LOW;{-to DFFQuotient[35]} POWER_UP_LEVEL=LOW;{-to DFFQuotient[36]} POWER_UP_LEVEL=LOW;{-to DFFQuotient[37]} POWER_UP_LEVEL=LOW" */;
	input   clock;
	input   [10:0]  denominator;
	input   [18:0]  numerator;
	output   [18:0]  quotient;
	output   [10:0]  remainder;

	reg	[21:0]	DFFDenominator/* synthesis ALTERA_ATTRIBUTE="POWER_UP_LEVEL=HIGH" */;
	reg	[37:0]	DFFNumerator;
	wire	[37:0]	wire_DFFQuotient_d;
	reg	[37:0]	DFFQuotient;
	reg	[23:0]	DFFStage;
	wire  wire_add_sub_0_cout;
	wire  [0:0]   wire_add_sub_0_result;
	wire  wire_add_sub_1_cout;
	wire  [1:0]   wire_add_sub_1_result;
	wire	[11:0]	wire_add_sub_10_result_int;
	wire	wire_add_sub_10_cout;
	wire	[10:0]	wire_add_sub_10_dataa;
	wire	[10:0]	wire_add_sub_10_datab;
	wire	[10:0]	wire_add_sub_10_result;
	wire	[12:0]	wire_add_sub_11_result_int;
	wire	wire_add_sub_11_cout;
	wire	[11:0]	wire_add_sub_11_dataa;
	wire	[11:0]	wire_add_sub_11_datab;
	wire	[11:0]	wire_add_sub_11_result;
	wire	[12:0]	wire_add_sub_12_result_int;
	wire	wire_add_sub_12_cout;
	wire	[11:0]	wire_add_sub_12_dataa;
	wire	[11:0]	wire_add_sub_12_datab;
	wire	[11:0]	wire_add_sub_12_result;
	wire	[12:0]	wire_add_sub_13_result_int;
	wire	wire_add_sub_13_cout;
	wire	[11:0]	wire_add_sub_13_dataa;
	wire	[11:0]	wire_add_sub_13_datab;
	wire	[11:0]	wire_add_sub_13_result;
	wire	[12:0]	wire_add_sub_14_result_int;
	wire	wire_add_sub_14_cout;
	wire	[11:0]	wire_add_sub_14_dataa;
	wire	[11:0]	wire_add_sub_14_datab;
	wire	[11:0]	wire_add_sub_14_result;
	wire	[12:0]	wire_add_sub_15_result_int;
	wire	wire_add_sub_15_cout;
	wire	[11:0]	wire_add_sub_15_dataa;
	wire	[11:0]	wire_add_sub_15_datab;
	wire	[11:0]	wire_add_sub_15_result;
	wire	[12:0]	wire_add_sub_16_result_int;
	wire	wire_add_sub_16_cout;
	wire	[11:0]	wire_add_sub_16_dataa;
	wire	[11:0]	wire_add_sub_16_datab;
	wire	[11:0]	wire_add_sub_16_result;
	wire	[12:0]	wire_add_sub_17_result_int;
	wire	wire_add_sub_17_cout;
	wire	[11:0]	wire_add_sub_17_dataa;
	wire	[11:0]	wire_add_sub_17_datab;
	wire	[11:0]	wire_add_sub_17_result;
	wire	[12:0]	wire_add_sub_18_result_int;
	wire	wire_add_sub_18_cout;
	wire	[11:0]	wire_add_sub_18_dataa;
	wire	[11:0]	wire_add_sub_18_datab;
	wire	[11:0]	wire_add_sub_18_result;
	wire	[3:0]	wire_add_sub_2_result_int;
	wire	wire_add_sub_2_cout;
	wire	[2:0]	wire_add_sub_2_dataa;
	wire	[2:0]	wire_add_sub_2_datab;
	wire	[2:0]	wire_add_sub_2_result;
	wire	[4:0]	wire_add_sub_3_result_int;
	wire	wire_add_sub_3_cout;
	wire	[3:0]	wire_add_sub_3_dataa;
	wire	[3:0]	wire_add_sub_3_datab;
	wire	[3:0]	wire_add_sub_3_result;
	wire	[5:0]	wire_add_sub_4_result_int;
	wire	wire_add_sub_4_cout;
	wire	[4:0]	wire_add_sub_4_dataa;
	wire	[4:0]	wire_add_sub_4_datab;
	wire	[4:0]	wire_add_sub_4_result;
	wire	[6:0]	wire_add_sub_5_result_int;
	wire	wire_add_sub_5_cout;
	wire	[5:0]	wire_add_sub_5_dataa;
	wire	[5:0]	wire_add_sub_5_datab;
	wire	[5:0]	wire_add_sub_5_result;
	wire	[7:0]	wire_add_sub_6_result_int;
	wire	wire_add_sub_6_cout;
	wire	[6:0]	wire_add_sub_6_dataa;
	wire	[6:0]	wire_add_sub_6_datab;
	wire	[6:0]	wire_add_sub_6_result;
	wire	[8:0]	wire_add_sub_7_result_int;
	wire	wire_add_sub_7_cout;
	wire	[7:0]	wire_add_sub_7_dataa;
	wire	[7:0]	wire_add_sub_7_datab;
	wire	[7:0]	wire_add_sub_7_result;
	wire	[9:0]	wire_add_sub_8_result_int;
	wire	wire_add_sub_8_cout;
	wire	[8:0]	wire_add_sub_8_dataa;
	wire	[8:0]	wire_add_sub_8_datab;
	wire	[8:0]	wire_add_sub_8_result;
	wire	[10:0]	wire_add_sub_9_result_int;
	wire	wire_add_sub_9_cout;
	wire	[9:0]	wire_add_sub_9_dataa;
	wire	[9:0]	wire_add_sub_9_datab;
	wire	[9:0]	wire_add_sub_9_result;
	wire aclr;
	wire clk_en;
	wire  [239:0]  DenominatorIn;
	wire  [239:0]  DenominatorIn_tmp;
	wire  gnd_wire;
	wire  [379:0]  nose;
	wire  [379:0]  NumeratorIn;
	wire  [379:0]  NumeratorIn_tmp;
	wire  [227:0]  prestg;
	wire  [18:0]  quotient_tmp;
	wire  [219:0]  sel;
	wire  [379:0]  selnose;
	wire  [239:0]  StageIn;
	wire  [239:0]  StageIn_tmp;
	wire  [227:0]  StageOut;
	wire  vcc_wire;

	// synopsys translate_off
	initial
		DFFDenominator = {22{1'b1}};
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) DFFDenominator <= {22{1'b1}};
		else if  (clk_en == 1'b1)   DFFDenominator <= {DFFDenominator[10:0], denominator};
	// synopsys translate_off
	initial
		DFFNumerator = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) DFFNumerator <= 38'b0;
		else if  (clk_en == 1'b1)   DFFNumerator <= {DFFNumerator[18:0], numerator};
	// synopsys translate_off
	initial
		DFFQuotient[0:0] = {1{1'b1}};
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) DFFQuotient[0:0] <= {1{1'b1}};
		else if  (clk_en == 1'b1)   DFFQuotient[0:0] <= wire_DFFQuotient_d[0:0];
	// synopsys translate_off
	initial
		DFFQuotient[1:1] = {1{1'b1}};
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) DFFQuotient[1:1] <= {1{1'b1}};
		else if  (clk_en == 1'b1)   DFFQuotient[1:1] <= wire_DFFQuotient_d[1:1];
	// synopsys translate_off
	initial
		DFFQuotient[2:2] = {1{1'b1}};
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) DFFQuotient[2:2] <= {1{1'b1}};
		else if  (clk_en == 1'b1)   DFFQuotient[2:2] <= wire_DFFQuotient_d[2:2];
	// synopsys translate_off
	initial
		DFFQuotient[3:3] = {1{1'b1}};
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) DFFQuotient[3:3] <= {1{1'b1}};
		else if  (clk_en == 1'b1)   DFFQuotient[3:3] <= wire_DFFQuotient_d[3:3];
	// synopsys translate_off
	initial
		DFFQuotient[4:4] = {1{1'b1}};
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) DFFQuotient[4:4] <= {1{1'b1}};
		else if  (clk_en == 1'b1)   DFFQuotient[4:4] <= wire_DFFQuotient_d[4:4];
	// synopsys translate_off
	initial
		DFFQuotient[5:5] = {1{1'b1}};
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) DFFQuotient[5:5] <= {1{1'b1}};
		else if  (clk_en == 1'b1)   DFFQuotient[5:5] <= wire_DFFQuotient_d[5:5];
	// synopsys translate_off
	initial
		DFFQuotient[6:6] = {1{1'b1}};
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) DFFQuotient[6:6] <= {1{1'b1}};
		else if  (clk_en == 1'b1)   DFFQuotient[6:6] <= wire_DFFQuotient_d[6:6];
	// synopsys translate_off
	initial
		DFFQuotient[7:7] = {1{1'b1}};
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) DFFQuotient[7:7] <= {1{1'b1}};
		else if  (clk_en == 1'b1)   DFFQuotient[7:7] <= wire_DFFQuotient_d[7:7];
	// synopsys translate_off
	initial
		DFFQuotient[8:8] = {1{1'b1}};
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) DFFQuotient[8:8] <= {1{1'b1}};
		else if  (clk_en == 1'b1)   DFFQuotient[8:8] <= wire_DFFQuotient_d[8:8];
	// synopsys translate_off
	initial
		DFFQuotient[9:9] = {1{1'b1}};
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) DFFQuotient[9:9] <= {1{1'b1}};
		else if  (clk_en == 1'b1)   DFFQuotient[9:9] <= wire_DFFQuotient_d[9:9];
	// synopsys translate_off
	initial
		DFFQuotient[10:10] = {1{1'b1}};
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) DFFQuotient[10:10] <= {1{1'b1}};
		else if  (clk_en == 1'b1)   DFFQuotient[10:10] <= wire_DFFQuotient_d[10:10];
	// synopsys translate_off
	initial
		DFFQuotient[11:11] = {1{1'b1}};
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) DFFQuotient[11:11] <= {1{1'b1}};
		else if  (clk_en == 1'b1)   DFFQuotient[11:11] <= wire_DFFQuotient_d[11:11];
	// synopsys translate_off
	initial
		DFFQuotient[12:12] = {1{1'b1}};
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) DFFQuotient[12:12] <= {1{1'b1}};
		else if  (clk_en == 1'b1)   DFFQuotient[12:12] <= wire_DFFQuotient_d[12:12];
	// synopsys translate_off
	initial
		DFFQuotient[13:13] = {1{1'b1}};
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) DFFQuotient[13:13] <= {1{1'b1}};
		else if  (clk_en == 1'b1)   DFFQuotient[13:13] <= wire_DFFQuotient_d[13:13];
	// synopsys translate_off
	initial
		DFFQuotient[14:14] = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) DFFQuotient[14:14] <= 1'b0;
		else if  (clk_en == 1'b1)   DFFQuotient[14:14] <= wire_DFFQuotient_d[14:14];
	// synopsys translate_off
	initial
		DFFQuotient[15:15] = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) DFFQuotient[15:15] <= 1'b0;
		else if  (clk_en == 1'b1)   DFFQuotient[15:15] <= wire_DFFQuotient_d[15:15];
	// synopsys translate_off
	initial
		DFFQuotient[16:16] = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) DFFQuotient[16:16] <= 1'b0;
		else if  (clk_en == 1'b1)   DFFQuotient[16:16] <= wire_DFFQuotient_d[16:16];
	// synopsys translate_off
	initial
		DFFQuotient[17:17] = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) DFFQuotient[17:17] <= 1'b0;
		else if  (clk_en == 1'b1)   DFFQuotient[17:17] <= wire_DFFQuotient_d[17:17];
	// synopsys translate_off
	initial
		DFFQuotient[18:18] = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) DFFQuotient[18:18] <= 1'b0;
		else if  (clk_en == 1'b1)   DFFQuotient[18:18] <= wire_DFFQuotient_d[18:18];
	// synopsys translate_off
	initial
		DFFQuotient[19:19] = {1{1'b1}};
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) DFFQuotient[19:19] <= {1{1'b1}};
		else if  (clk_en == 1'b1)   DFFQuotient[19:19] <= wire_DFFQuotient_d[19:19];
	// synopsys translate_off
	initial
		DFFQuotient[20:20] = {1{1'b1}};
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) DFFQuotient[20:20] <= {1{1'b1}};
		else if  (clk_en == 1'b1)   DFFQuotient[20:20] <= wire_DFFQuotient_d[20:20];
	// synopsys translate_off
	initial
		DFFQuotient[21:21] = {1{1'b1}};
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) DFFQuotient[21:21] <= {1{1'b1}};
		else if  (clk_en == 1'b1)   DFFQuotient[21:21] <= wire_DFFQuotient_d[21:21];
	// synopsys translate_off
	initial
		DFFQuotient[22:22] = {1{1'b1}};
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) DFFQuotient[22:22] <= {1{1'b1}};
		else if  (clk_en == 1'b1)   DFFQuotient[22:22] <= wire_DFFQuotient_d[22:22];
	// synopsys translate_off
	initial
		DFFQuotient[23:23] = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) DFFQuotient[23:23] <= 1'b0;
		else if  (clk_en == 1'b1)   DFFQuotient[23:23] <= wire_DFFQuotient_d[23:23];
	// synopsys translate_off
	initial
		DFFQuotient[24:24] = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) DFFQuotient[24:24] <= 1'b0;
		else if  (clk_en == 1'b1)   DFFQuotient[24:24] <= wire_DFFQuotient_d[24:24];
	// synopsys translate_off
	initial
		DFFQuotient[25:25] = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) DFFQuotient[25:25] <= 1'b0;
		else if  (clk_en == 1'b1)   DFFQuotient[25:25] <= wire_DFFQuotient_d[25:25];
	// synopsys translate_off
	initial
		DFFQuotient[26:26] = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) DFFQuotient[26:26] <= 1'b0;
		else if  (clk_en == 1'b1)   DFFQuotient[26:26] <= wire_DFFQuotient_d[26:26];
	// synopsys translate_off
	initial
		DFFQuotient[27:27] = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) DFFQuotient[27:27] <= 1'b0;
		else if  (clk_en == 1'b1)   DFFQuotient[27:27] <= wire_DFFQuotient_d[27:27];
	// synopsys translate_off
	initial
		DFFQuotient[28:28] = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) DFFQuotient[28:28] <= 1'b0;
		else if  (clk_en == 1'b1)   DFFQuotient[28:28] <= wire_DFFQuotient_d[28:28];
	// synopsys translate_off
	initial
		DFFQuotient[29:29] = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) DFFQuotient[29:29] <= 1'b0;
		else if  (clk_en == 1'b1)   DFFQuotient[29:29] <= wire_DFFQuotient_d[29:29];
	// synopsys translate_off
	initial
		DFFQuotient[30:30] = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) DFFQuotient[30:30] <= 1'b0;
		else if  (clk_en == 1'b1)   DFFQuotient[30:30] <= wire_DFFQuotient_d[30:30];
	// synopsys translate_off
	initial
		DFFQuotient[31:31] = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) DFFQuotient[31:31] <= 1'b0;
		else if  (clk_en == 1'b1)   DFFQuotient[31:31] <= wire_DFFQuotient_d[31:31];
	// synopsys translate_off
	initial
		DFFQuotient[32:32] = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) DFFQuotient[32:32] <= 1'b0;
		else if  (clk_en == 1'b1)   DFFQuotient[32:32] <= wire_DFFQuotient_d[32:32];
	// synopsys translate_off
	initial
		DFFQuotient[33:33] = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) DFFQuotient[33:33] <= 1'b0;
		else if  (clk_en == 1'b1)   DFFQuotient[33:33] <= wire_DFFQuotient_d[33:33];
	// synopsys translate_off
	initial
		DFFQuotient[34:34] = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) DFFQuotient[34:34] <= 1'b0;
		else if  (clk_en == 1'b1)   DFFQuotient[34:34] <= wire_DFFQuotient_d[34:34];
	// synopsys translate_off
	initial
		DFFQuotient[35:35] = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) DFFQuotient[35:35] <= 1'b0;
		else if  (clk_en == 1'b1)   DFFQuotient[35:35] <= wire_DFFQuotient_d[35:35];
	// synopsys translate_off
	initial
		DFFQuotient[36:36] = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) DFFQuotient[36:36] <= 1'b0;
		else if  (clk_en == 1'b1)   DFFQuotient[36:36] <= wire_DFFQuotient_d[36:36];
	// synopsys translate_off
	initial
		DFFQuotient[37:37] = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) DFFQuotient[37:37] <= 1'b0;
		else if  (clk_en == 1'b1)   DFFQuotient[37:37] <= wire_DFFQuotient_d[37:37];
	assign
		wire_DFFQuotient_d = {DFFQuotient[18:14], (~ selnose[100]), (~ selnose[120]), (~ selnose[140]), (~ selnose[160]), (~ selnose[180]), (~ selnose[200]), (~ selnose[220]), (~ selnose[240]), (~ selnose[260]), (~ selnose[280]), {4{vcc_wire}}, (~ selnose[0]), (~ selnose[20]), (~ selnose[40]), (~ selnose[60]), (~ selnose[80]), {14{vcc_wire}}};
	// synopsys translate_off
	initial
		DFFStage = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) DFFStage <= 24'b0;
		else if  (clk_en == 1'b1)   DFFStage <= {StageOut[179:168], StageOut[59:48]};
	divider_add_sub   add_sub_0
	( 
	.cout(wire_add_sub_0_cout),
	.dataa(NumeratorIn[18]),
	.datab(DenominatorIn[0]),
	.result(wire_add_sub_0_result));
	divider_add_sub1   add_sub_1
	( 
	.cout(wire_add_sub_1_cout),
	.dataa({StageIn[12], NumeratorIn[36]}),
	.datab(DenominatorIn[13:12]),
	.result(wire_add_sub_1_result));
	assign
		wire_add_sub_10_result_int = wire_add_sub_10_dataa - wire_add_sub_10_datab;
	assign
		wire_add_sub_10_result = wire_add_sub_10_result_int[10:0],
		wire_add_sub_10_cout = ~wire_add_sub_10_result_int[11:11];
	assign
		wire_add_sub_10_dataa = {StageIn[129:120], NumeratorIn[198]},
		wire_add_sub_10_datab = DenominatorIn[130:120];
	assign
		wire_add_sub_11_result_int = wire_add_sub_11_dataa - wire_add_sub_11_datab;
	assign
		wire_add_sub_11_result = wire_add_sub_11_result_int[11:0],
		wire_add_sub_11_cout = ~wire_add_sub_11_result_int[12:12];
	assign
		wire_add_sub_11_dataa = {StageIn[142:132], NumeratorIn[216]},
		wire_add_sub_11_datab = DenominatorIn[143:132];
	assign
		wire_add_sub_12_result_int = wire_add_sub_12_dataa - wire_add_sub_12_datab;
	assign
		wire_add_sub_12_result = wire_add_sub_12_result_int[11:0],
		wire_add_sub_12_cout = ~wire_add_sub_12_result_int[12:12];
	assign
		wire_add_sub_12_dataa = {StageIn[154:144], NumeratorIn[234]},
		wire_add_sub_12_datab = DenominatorIn[155:144];
	assign
		wire_add_sub_13_result_int = wire_add_sub_13_dataa - wire_add_sub_13_datab;
	assign
		wire_add_sub_13_result = wire_add_sub_13_result_int[11:0],
		wire_add_sub_13_cout = ~wire_add_sub_13_result_int[12:12];
	assign
		wire_add_sub_13_dataa = {StageIn[166:156], NumeratorIn[252]},
		wire_add_sub_13_datab = DenominatorIn[167:156];
	assign
		wire_add_sub_14_result_int = wire_add_sub_14_dataa - wire_add_sub_14_datab;
	assign
		wire_add_sub_14_result = wire_add_sub_14_result_int[11:0],
		wire_add_sub_14_cout = ~wire_add_sub_14_result_int[12:12];
	assign
		wire_add_sub_14_dataa = {StageIn[178:168], NumeratorIn[270]},
		wire_add_sub_14_datab = DenominatorIn[179:168];
	assign
		wire_add_sub_15_result_int = wire_add_sub_15_dataa - wire_add_sub_15_datab;
	assign
		wire_add_sub_15_result = wire_add_sub_15_result_int[11:0],
		wire_add_sub_15_cout = ~wire_add_sub_15_result_int[12:12];
	assign
		wire_add_sub_15_dataa = {StageIn[190:180], NumeratorIn[288]},
		wire_add_sub_15_datab = DenominatorIn[191:180];
	assign
		wire_add_sub_16_result_int = wire_add_sub_16_dataa - wire_add_sub_16_datab;
	assign
		wire_add_sub_16_result = wire_add_sub_16_result_int[11:0],
		wire_add_sub_16_cout = ~wire_add_sub_16_result_int[12:12];
	assign
		wire_add_sub_16_dataa = {StageIn[202:192], NumeratorIn[306]},
		wire_add_sub_16_datab = DenominatorIn[203:192];
	assign
		wire_add_sub_17_result_int = wire_add_sub_17_dataa - wire_add_sub_17_datab;
	assign
		wire_add_sub_17_result = wire_add_sub_17_result_int[11:0],
		wire_add_sub_17_cout = ~wire_add_sub_17_result_int[12:12];
	assign
		wire_add_sub_17_dataa = {StageIn[214:204], NumeratorIn[324]},
		wire_add_sub_17_datab = DenominatorIn[215:204];
	assign
		wire_add_sub_18_result_int = wire_add_sub_18_dataa - wire_add_sub_18_datab;
	assign
		wire_add_sub_18_result = wire_add_sub_18_result_int[11:0],
		wire_add_sub_18_cout = ~wire_add_sub_18_result_int[12:12];
	assign
		wire_add_sub_18_dataa = {StageIn[226:216], NumeratorIn[342]},
		wire_add_sub_18_datab = DenominatorIn[227:216];
	assign
		wire_add_sub_2_result_int = wire_add_sub_2_dataa - wire_add_sub_2_datab;
	assign
		wire_add_sub_2_result = wire_add_sub_2_result_int[2:0],
		wire_add_sub_2_cout = ~wire_add_sub_2_result_int[3:3];
	assign
		wire_add_sub_2_dataa = {StageIn[25:24], NumeratorIn[54]},
		wire_add_sub_2_datab = DenominatorIn[26:24];
	assign
		wire_add_sub_3_result_int = wire_add_sub_3_dataa - wire_add_sub_3_datab;
	assign
		wire_add_sub_3_result = wire_add_sub_3_result_int[3:0],
		wire_add_sub_3_cout = ~wire_add_sub_3_result_int[4:4];
	assign
		wire_add_sub_3_dataa = {StageIn[38:36], NumeratorIn[72]},
		wire_add_sub_3_datab = DenominatorIn[39:36];
	assign
		wire_add_sub_4_result_int = wire_add_sub_4_dataa - wire_add_sub_4_datab;
	assign
		wire_add_sub_4_result = wire_add_sub_4_result_int[4:0],
		wire_add_sub_4_cout = ~wire_add_sub_4_result_int[5:5];
	assign
		wire_add_sub_4_dataa = {StageIn[51:48], NumeratorIn[90]},
		wire_add_sub_4_datab = DenominatorIn[52:48];
	assign
		wire_add_sub_5_result_int = wire_add_sub_5_dataa - wire_add_sub_5_datab;
	assign
		wire_add_sub_5_result = wire_add_sub_5_result_int[5:0],
		wire_add_sub_5_cout = ~wire_add_sub_5_result_int[6:6];
	assign
		wire_add_sub_5_dataa = {StageIn[64:60], NumeratorIn[108]},
		wire_add_sub_5_datab = DenominatorIn[65:60];
	assign
		wire_add_sub_6_result_int = wire_add_sub_6_dataa - wire_add_sub_6_datab;
	assign
		wire_add_sub_6_result = wire_add_sub_6_result_int[6:0],
		wire_add_sub_6_cout = ~wire_add_sub_6_result_int[7:7];
	assign
		wire_add_sub_6_dataa = {StageIn[77:72], NumeratorIn[126]},
		wire_add_sub_6_datab = DenominatorIn[78:72];
	assign
		wire_add_sub_7_result_int = wire_add_sub_7_dataa - wire_add_sub_7_datab;
	assign
		wire_add_sub_7_result = wire_add_sub_7_result_int[7:0],
		wire_add_sub_7_cout = ~wire_add_sub_7_result_int[8:8];
	assign
		wire_add_sub_7_dataa = {StageIn[90:84], NumeratorIn[144]},
		wire_add_sub_7_datab = DenominatorIn[91:84];
	assign
		wire_add_sub_8_result_int = wire_add_sub_8_dataa - wire_add_sub_8_datab;
	assign
		wire_add_sub_8_result = wire_add_sub_8_result_int[8:0],
		wire_add_sub_8_cout = ~wire_add_sub_8_result_int[9:9];
	assign
		wire_add_sub_8_dataa = {StageIn[103:96], NumeratorIn[162]},
		wire_add_sub_8_datab = DenominatorIn[104:96];
	assign
		wire_add_sub_9_result_int = wire_add_sub_9_dataa - wire_add_sub_9_datab;
	assign
		wire_add_sub_9_result = wire_add_sub_9_result_int[9:0],
		wire_add_sub_9_cout = ~wire_add_sub_9_result_int[10:10];
	assign
		wire_add_sub_9_dataa = {StageIn[116:108], NumeratorIn[180]},
		wire_add_sub_9_datab = DenominatorIn[117:108];
	assign
		aclr = 1'b0,
		clk_en = 1'b1,
		DenominatorIn = DenominatorIn_tmp,
		DenominatorIn_tmp = {DenominatorIn[227:180], {gnd_wire, DFFDenominator[21:11]}, DenominatorIn[167:60], {gnd_wire, DFFDenominator[10:0]}, DenominatorIn[47:0], {gnd_wire, denominator}},
		gnd_wire = 1'b0,
		nose = {{19{1'b0}}, wire_add_sub_18_cout, {19{1'b0}}, wire_add_sub_17_cout, {19{1'b0}}, wire_add_sub_16_cout, {19{1'b0}}, wire_add_sub_15_cout, {19{1'b0}}, wire_add_sub_14_cout, {19{1'b0}}, wire_add_sub_13_cout, {19{1'b0}}, wire_add_sub_12_cout, {19{1'b0}}, wire_add_sub_11_cout, {19{1'b0}}, wire_add_sub_10_cout, {19{1'b0}}, wire_add_sub_9_cout, {19{1'b0}}, wire_add_sub_8_cout, {19{1'b0}}, wire_add_sub_7_cout, {19{1'b0}}, wire_add_sub_6_cout, {19{1'b0}}, wire_add_sub_5_cout, {19{1'b0}}, wire_add_sub_4_cout, {19{1'b0}}, wire_add_sub_3_cout, {19{1'b0}}, wire_add_sub_2_cout, {19{1'b0}}, wire_add_sub_1_cout, {19{1'b0}}, wire_add_sub_0_cout},
		NumeratorIn = NumeratorIn_tmp,
		NumeratorIn_tmp = {NumeratorIn[360:285], DFFNumerator[37:19], NumeratorIn[265:95], DFFNumerator[18:0], NumeratorIn[75:0], numerator},
		prestg = {wire_add_sub_18_result, wire_add_sub_17_result, wire_add_sub_16_result, wire_add_sub_15_result, wire_add_sub_14_result, wire_add_sub_13_result, wire_add_sub_12_result, wire_add_sub_11_result, {1{1'b0}}, wire_add_sub_10_result, {2{1'b0}}, wire_add_sub_9_result, {3{1'b0}}, wire_add_sub_8_result, {4{1'b0}}, wire_add_sub_7_result, {5{1'b0}}, wire_add_sub_6_result, {6{1'b0}}, wire_add_sub_5_result, {7{1'b0}}, wire_add_sub_4_result, {8{1'b0}}, wire_add_sub_3_result, {9{1'b0}}, wire_add_sub_2_result, {10{1'b0}}, wire_add_sub_1_result, {11{1'b0}}, wire_add_sub_0_result},
		quotient = quotient_tmp,
		quotient_tmp = {DFFQuotient[37:23], (~ selnose[300]), (~ selnose[320]), (~ selnose[340]), (~ selnose[360])},
		remainder = StageIn[238:228],
		sel = {gnd_wire, (sel[219] | DenominatorIn[238]), (sel[218] | DenominatorIn[237]), (sel[217] | DenominatorIn[236]), (sel[216] | DenominatorIn[235]), (sel[215] | DenominatorIn[234]), (sel[214] | DenominatorIn[233]), (sel[213] | DenominatorIn[232]), (sel[212] | DenominatorIn[231]), (sel[211] | DenominatorIn[230]), (sel[210] | DenominatorIn[229]), gnd_wire, (sel[208] | DenominatorIn[226]), (sel[207] | DenominatorIn[225]), (sel[206] | DenominatorIn[224]), (sel[205] | DenominatorIn[223]), (sel[204] | DenominatorIn[222]), (sel[203] | DenominatorIn[221]), (sel[202] | DenominatorIn[220]), (sel[201] | DenominatorIn[219]), (sel[200] | DenominatorIn[218]), (sel[199] | DenominatorIn[217]), gnd_wire, (sel[197] | DenominatorIn[214]), (sel[196] | DenominatorIn[213]), (sel[195] | DenominatorIn[212]), (sel[194] | DenominatorIn[211]), (sel[193] | DenominatorIn[210]), (sel[192] | DenominatorIn[209]), (sel[191] | DenominatorIn[208]), (sel[190] | DenominatorIn[207]), (sel[189] | DenominatorIn[206]), (sel[188] | DenominatorIn[205]), gnd_wire, (sel[186] | DenominatorIn[202]), (sel[185] | DenominatorIn[201]), (sel[184] | DenominatorIn[200]), (sel[183] | DenominatorIn[199]), (sel[182] | DenominatorIn[198]), (sel[181] | DenominatorIn[197]), (sel[180] | DenominatorIn[196]), (sel[179] | DenominatorIn[195]), (sel[178] | DenominatorIn[194]), (sel[177] | DenominatorIn[193]), gnd_wire, (sel[175] | DenominatorIn[190]), (sel[174] | DenominatorIn[189]), (sel[173] | DenominatorIn[188]), (sel[172] | DenominatorIn[187]), (sel[171] | DenominatorIn[186]), (sel[170] | DenominatorIn[185]), (sel[169] | DenominatorIn[184]), (sel[168] | DenominatorIn[183]), (sel[167] | DenominatorIn[182]), (sel[166] | DenominatorIn[181]), gnd_wire, (sel[164] | DenominatorIn[178]), (sel[163] | DenominatorIn[177]), (sel[162] | DenominatorIn[176]), (sel[161] | DenominatorIn[175]), (sel[160] | DenominatorIn[174]), (sel[159] | DenominatorIn[173]), (sel[158] | DenominatorIn[172]), (sel[157] | DenominatorIn[171]), (sel[156] | DenominatorIn[170]), (sel[155] | DenominatorIn[169]),
 gnd_wire, (sel[153] | DenominatorIn[166]), (sel[152] | DenominatorIn[165]), (sel[151] | DenominatorIn[164]), (sel[150] | DenominatorIn[163]), (sel[149] | DenominatorIn[162]), (sel[148] | DenominatorIn[161]), (sel[147] | DenominatorIn[160]), (sel[146] | DenominatorIn[159]), (sel[145] | DenominatorIn[158]), (sel[144] | DenominatorIn[157]), gnd_wire, (sel[142] | DenominatorIn[154]), (sel[141] | DenominatorIn[153]), (sel[140] | DenominatorIn[152]), (sel[139] | DenominatorIn[151]), (sel[138] | DenominatorIn[150]), (sel[137] | DenominatorIn[149]), (sel[136] | DenominatorIn[148]), (sel[135] | DenominatorIn[147]), (sel[134] | DenominatorIn[146]), (sel[133] | DenominatorIn[145]), gnd_wire, (sel[131] | DenominatorIn[142]), (sel[130] | DenominatorIn[141]), (sel[129] | DenominatorIn[140]), (sel[128] | DenominatorIn[139]), (sel[127] | DenominatorIn[138]), (sel[126] | DenominatorIn[137]), (sel[125] | DenominatorIn[136]), (sel[124] | DenominatorIn[135]), (sel[123] | DenominatorIn[134]), (sel[122] | DenominatorIn[133]), gnd_wire, (sel[120] | DenominatorIn[130]), (sel[119] | DenominatorIn[129]), (sel[118] | DenominatorIn[128]), (sel[117] | DenominatorIn[127]), (sel[116] | DenominatorIn[126]), (sel[115] | DenominatorIn[125]), (sel[114] | DenominatorIn[124]), (sel[113] | DenominatorIn[123]), (sel[112] | DenominatorIn[122]), (sel[111] | DenominatorIn[121]), gnd_wire, (sel[109] | DenominatorIn[118]), (sel[108] | DenominatorIn[117]), (sel[107] | DenominatorIn[116]), (sel[106] | DenominatorIn[115]), (sel[105] | DenominatorIn[114]), (sel[104] | DenominatorIn[113]), (sel[103] | DenominatorIn[112]), (sel[102] | DenominatorIn[111]), (sel[101] | DenominatorIn[110]), (sel[100] | DenominatorIn[109]), gnd_wire, (sel[98] | DenominatorIn[106]), (sel[97] | DenominatorIn[105]), (sel[96] | DenominatorIn[104]), (sel[95] | DenominatorIn[103]), (sel[94] | DenominatorIn[102]), (sel[93] | DenominatorIn[101]), (sel[92] | DenominatorIn[100]), (sel[91] | DenominatorIn[99]), (sel[90] | DenominatorIn[98]), (sel[89] | DenominatorIn[97]), gnd_wire, (sel[87] |
 DenominatorIn[94]), (sel[86] | DenominatorIn[93]), (sel[85] | DenominatorIn[92]), (sel[84] | DenominatorIn[91]), (sel[83] | DenominatorIn[90]), (sel[82] | DenominatorIn[89]), (sel[81] | DenominatorIn[88]), (sel[80] | DenominatorIn[87]), (sel[79] | DenominatorIn[86]), (sel[78] | DenominatorIn[85]), gnd_wire, (sel[76] | DenominatorIn[82]), (sel[75] | DenominatorIn[81]), (sel[74] | DenominatorIn[80]), (sel[73] | DenominatorIn[79]), (sel[72] | DenominatorIn[78]), (sel[71] | DenominatorIn[77]), (sel[70] | DenominatorIn[76]), (sel[69] | DenominatorIn[75]), (sel[68] | DenominatorIn[74]), (sel[67] | DenominatorIn[73]), gnd_wire, (sel[65] | DenominatorIn[70]), (sel[64] | DenominatorIn[69]), (sel[63] | DenominatorIn[68]), (sel[62] | DenominatorIn[67]), (sel[61] | DenominatorIn[66]), (sel[60] | DenominatorIn[65]), (sel[59] | DenominatorIn[64]), (sel[58] | DenominatorIn[63]), (sel[57] | DenominatorIn[62]), (sel[56] | DenominatorIn[61]), gnd_wire, (sel[54] | DenominatorIn[58]), (sel[53] | DenominatorIn[57]), (sel[52] | DenominatorIn[56]), (sel[51] | DenominatorIn[55]), (sel[50] | DenominatorIn[54]), (sel[49] | DenominatorIn[53]), (sel[48] | DenominatorIn[52]), (sel[47] | DenominatorIn[51]), (sel[46] | DenominatorIn[50]), (sel[45] | DenominatorIn[49]), gnd_wire, (sel[43] | DenominatorIn[46]), (sel[42] | DenominatorIn[45]), (sel[41] | DenominatorIn[44]), (sel[40] | DenominatorIn[43]), (sel[39] | DenominatorIn[42]), (sel[38] | DenominatorIn[41]), (sel[37] | DenominatorIn[40]), (sel[36] | DenominatorIn[39]), (sel[35] | DenominatorIn[38]), (sel[34] | DenominatorIn[37]), gnd_wire, (sel[32] | DenominatorIn[34]), (sel[31] | DenominatorIn[33]), (sel[30] | DenominatorIn[32]), (sel[29] | DenominatorIn[31]), (sel[28] | DenominatorIn[30]), (sel[27] | DenominatorIn[29]), (sel[26] | DenominatorIn[28]), (sel[25] | DenominatorIn[27]), (sel[24] | DenominatorIn[26]), (sel[23] | DenominatorIn[25]), gnd_wire, (sel[21] | DenominatorIn[22]), (sel[20] | DenominatorIn[21]), (sel[19] | DenominatorIn[20]), (sel[18] | DenominatorIn[19]), (sel[17] | DenominatorIn[18]
), (sel[16] | DenominatorIn[17]), (sel[15] | DenominatorIn[16]), (sel[14] | DenominatorIn[15]), (sel[13] | DenominatorIn[14]), (sel[12] | DenominatorIn[13]), gnd_wire, (sel[10] | DenominatorIn[10]), (sel[9] | DenominatorIn[9]), (sel[8] | DenominatorIn[8]), (sel[7] | DenominatorIn[7]), (sel[6] | DenominatorIn[6]), (sel[5] | DenominatorIn[5]), (sel[4] | DenominatorIn[4]), (sel[3] | DenominatorIn[3]), (sel[2] | DenominatorIn[2]), (sel[1] | DenominatorIn[1])},
		selnose = {(~ nose[379]), (~ nose[378]), (~ nose[377]), (~ nose[376]), (~ nose[375]), (~ nose[374]), (~ nose[373]), (~ nose[372]), ((~ nose[371]) | sel[219]), ((~ nose[370]) | sel[218]), ((~ nose[369]) | sel[217]), ((~ nose[368]) | sel[216]), ((~ nose[367]) | sel[215]), ((~ nose[366]) | sel[214]), ((~ nose[365]) | sel[213]), ((~ nose[364]) | sel[212]), ((~ nose[363]) | sel[211]), ((~ nose[362]) | sel[210]), ((~ nose[361]) | sel[209]), (~ nose[360]), (~ nose[359]), (~ nose[358]), (~ nose[357]), (~ nose[356]), (~ nose[355]), (~ nose[354]), (~ nose[353]), ((~ nose[352]) | sel[208]), ((~ nose[351]) | sel[207]), ((~ nose[350]) | sel[206]), ((~ nose[349]) | sel[205]), ((~ nose[348]) | sel[204]), ((~ nose[347]) | sel[203]), ((~ nose[346]) | sel[202]), ((~ nose[345]) | sel[201]), ((~ nose[344]) | sel[200]), ((~ nose[343]) | sel[199]), ((~ nose[342]) | sel[198]), (~ nose[341]), (~ nose[340]), (~ nose[339]), (~ nose[338]), (~ nose[337]), (~ nose[336]), (~ nose[335]), (~ nose[334]), ((~ nose[333]) | sel[197]), ((~ nose[332]) | sel[196]), ((~ nose[331]) | sel[195]), ((~ nose[330]) | sel[194]), ((~ nose[329]) | sel[193]), ((~ nose[328]) | sel[192]), ((~ nose[327]) | sel[191]), ((~ nose[326]) | sel[190]), ((~ nose[325]) | sel[189]), ((~ nose[324]) | sel[188]), ((~ nose[323]) | sel[187]), (~ nose[322]), (~ nose[321]), (~ nose[320]), (~ nose[319]), (~ nose[318]), (~ nose[317]), (~ nose[316]), (~ nose[315]), ((~ nose[314]) | sel[186]), ((~ nose[313]) | sel[185]), ((~ nose[312]) | sel[184]), ((~ nose[311]) | sel[183]), ((~ nose[310]) | sel[182]), ((~ nose[309]) | sel[181]), ((~ nose[308]) | sel[180]), ((~ nose[307]) | sel[179]), ((~ nose[306]) | sel[178]), ((~ nose[305]) | sel[177]), ((~ nose[304]) | sel[176]), (~ nose[303]), (~ nose[302]), (~ nose[301]), (~ nose[300]), (~ nose[299]), (~ nose[298]), (~ nose[297]), (~ nose[296]), ((~ nose[295]) | sel[175]), ((~ nose[294]) | sel[174]), ((~ nose[293]) | sel[173]), ((~ nose[292]) | sel[172]), ((~ nose[291]) | sel[171]), ((~ nose[290]) | sel[170]), ((~ nose[289]) | sel[169]), ((~ nose[288]
) | sel[168]), ((~ nose[287]) | sel[167]), ((~ nose[286]) | sel[166]), ((~ nose[285]) | sel[165]), (~ nose[284]), (~ nose[283]), (~ nose[282]), (~ nose[281]), (~ nose[280]), (~ nose[279]), (~ nose[278]), (~ nose[277]), ((~ nose[276]) | sel[164]), ((~ nose[275]) | sel[163]), ((~ nose[274]) | sel[162]), ((~ nose[273]) | sel[161]), ((~ nose[272]) | sel[160]), ((~ nose[271]) | sel[159]), ((~ nose[270]) | sel[158]), ((~ nose[269]) | sel[157]), ((~ nose[268]) | sel[156]), ((~ nose[267]) | sel[155]), ((~ nose[266]) | sel[154]), (~ nose[265]), (~ nose[264]), (~ nose[263]), (~ nose[262]), (~ nose[261]), (~ nose[260]), (~ nose[259]), (~ nose[258]), ((~ nose[257]) | sel[153]), ((~ nose[256]) | sel[152]), ((~ nose[255]) | sel[151]), ((~ nose[254]) | sel[150]), ((~ nose[253]) | sel[149]), ((~ nose[252]) | sel[148]), ((~ nose[251]) | sel[147]), ((~ nose[250]) | sel[146]), ((~ nose[249]) | sel[145]), ((~ nose[248]) | sel[144]), ((~ nose[247]) | sel[143]), (~ nose[246]), (~ nose[245]), (~ nose[244]), (~ nose[243]), (~ nose[242]), (~ nose[241]), (~ nose[240]), (~ nose[239]), ((~ nose[238]) | sel[142]), ((~ nose[237]) | sel[141]), ((~ nose[236]) | sel[140]), ((~ nose[235]) | sel[139]), ((~ nose[234]) | sel[138]), ((~ nose[233]) | sel[137]), ((~ nose[232]) | sel[136]), ((~ nose[231]) | sel[135]), ((~ nose[230]) | sel[134]), ((~ nose[229]) | sel[133]), ((~ nose[228]) | sel[132]), (~ nose[227]), (~ nose[226]), (~ nose[225]), (~ nose[224]), (~ nose[223]), (~ nose[222]), (~ nose[221]), (~ nose[220]), ((~ nose[219]) | sel[131]), ((~ nose[218]) | sel[130]), ((~ nose[217]) | sel[129]), ((~ nose[216]) | sel[128]), ((~ nose[215]) | sel[127]), ((~ nose[214]) | sel[126]), ((~ nose[213]) | sel[125]), ((~ nose[212]) | sel[124]), ((~ nose[211]) | sel[123]), ((~ nose[210]) | sel[122]), ((~ nose[209]) | sel[121]), (~ nose[208]), (~ nose[207]), (~ nose[206]), (~ nose[205]), (~ nose[204]), (~ nose[203]), (~ nose[202]), (~ nose[201]), ((~ nose[200]) | sel[120]), ((~ nose[199]) | sel[119]), ((~ nose[198]) | sel[118]), ((~ nose[197]) | sel[117]), ((~ nose[196]
) | sel[116]), ((~ nose[195]) | sel[115]), ((~ nose[194]) | sel[114]), ((~ nose[193]) | sel[113]), ((~ nose[192]) | sel[112]), ((~ nose[191]) | sel[111]), ((~ nose[190]) | sel[110]), (~ nose[189]), (~ nose[188]), (~ nose[187]), (~ nose[186]), (~ nose[185]), (~ nose[184]), (~ nose[183]), (~ nose[182]), ((~ nose[181]) | sel[109]), ((~ nose[180]) | sel[108]), ((~ nose[179]) | sel[107]), ((~ nose[178]) | sel[106]), ((~ nose[177]) | sel[105]), ((~ nose[176]) | sel[104]), ((~ nose[175]) | sel[103]), ((~ nose[174]) | sel[102]), ((~ nose[173]) | sel[101]), ((~ nose[172]) | sel[100]), ((~ nose[171]) | sel[99]), (~ nose[170]), (~ nose[169]), (~ nose[168]), (~ nose[167]), (~ nose[166]), (~ nose[165]), (~ nose[164]), (~ nose[163]), ((~ nose[162]) | sel[98]), ((~ nose[161]) | sel[97]), ((~ nose[160]) | sel[96]), ((~ nose[159]) | sel[95]), ((~ nose[158]) | sel[94]), ((~ nose[157]) | sel[93]), ((~ nose[156]) | sel[92]), ((~ nose[155]) | sel[91]), ((~ nose[154]) | sel[90]), ((~ nose[153]) | sel[89]), ((~ nose[152]) | sel[88]), (~ nose[151]), (~ nose[150]), (~ nose[149]), (~ nose[148]), (~ nose[147]), (~ nose[146]), (~ nose[145]), (~ nose[144]), ((~ nose[143]) | sel[87]), ((~ nose[142]) | sel[86]), ((~ nose[141]) | sel[85]), ((~ nose[140]) | sel[84]), ((~ nose[139]) | sel[83]), ((~ nose[138]) | sel[82]), ((~ nose[137]) | sel[81]), ((~ nose[136]) | sel[80]), ((~ nose[135]) | sel[79]), ((~ nose[134]) | sel[78]), ((~ nose[133]) | sel[77]), (~ nose[132]), (~ nose[131]), (~ nose[130]), (~ nose[129]), (~ nose[128]), (~ nose[127]), (~ nose[126]), (~ nose[125]), ((~ nose[124]) | sel[76]), ((~ nose[123]) | sel[75]), ((~ nose[122]) | sel[74]), ((~ nose[121]) | sel[73]), ((~ nose[120]) | sel[72]), ((~ nose[119]) | sel[71]), ((~ nose[118]) | sel[70]), ((~ nose[117]) | sel[69]), ((~ nose[116]) | sel[68]), ((~ nose[115]) | sel[67]), ((~ nose[114]) | sel[66]), (~ nose[113]), (~ nose[112]), (~ nose[111]), (~ nose[110]), (~ nose[109]), (~ nose[108]), (~ nose[107]), (~ nose[106]), ((~ nose[105]) | sel[65]), ((~ nose[104]) | sel[64]), ((~ nose[103]
) | sel[63]), ((~ nose[102]) | sel[62]), ((~ nose[101]) | sel[61]), ((~ nose[100]) | sel[60]), ((~ nose[99]) | sel[59]), ((~ nose[98]) | sel[58]), ((~ nose[97]) | sel[57]), ((~ nose[96]) | sel[56]), ((~ nose[95]) | sel[55]), (~ nose[94]), (~ nose[93]), (~ nose[92]), (~ nose[91]), (~ nose[90]), (~ nose[89]), (~ nose[88]), (~ nose[87]), ((~ nose[86]) | sel[54]), ((~ nose[85]) | sel[53]), ((~ nose[84]) | sel[52]), ((~ nose[83]) | sel[51]), ((~ nose[82]) | sel[50]), ((~ nose[81]) | sel[49]), ((~ nose[80]) | sel[48]), ((~ nose[79]) | sel[47]), ((~ nose[78]) | sel[46]), ((~ nose[77]) | sel[45]), ((~ nose[76]) | sel[44]), (~ nose[75]), (~ nose[74]), (~ nose[73]), (~ nose[72]), (~ nose[71]), (~ nose[70]), (~ nose[69]), (~ nose[68]), ((~ nose[67]) | sel[43]), ((~ nose[66]) | sel[42]), ((~ nose[65]) | sel[41]), ((~ nose[64]) | sel[40]), ((~ nose[63]) | sel[39]), ((~ nose[62]) | sel[38]), ((~ nose[61]) | sel[37]), ((~ nose[60]) | sel[36]), ((~ nose[59]) | sel[35]), ((~ nose[58]) | sel[34]), ((~ nose[57]) | sel[33]), (~ nose[56]), (~ nose[55]), (~ nose[54]), (~ nose[53]), (~ nose[52]), (~ nose[51]), (~ nose[50]), (~ nose[49]), ((~ nose[48]) | sel[32]), ((~ nose[47]) | sel[31]), ((~ nose[46]) | sel[30]), ((~ nose[45]) | sel[29]), ((~ nose[44]) | sel[28]), ((~ nose[43]) | sel[27]), ((~ nose[42]) | sel[26]), ((~ nose[41]) | sel[25]), ((~ nose[40]) | sel[24]), ((~ nose[39]) | sel[23]), ((~ nose[38]) | sel[22]), (~ nose[37]), (~ nose[36]), (~ nose[35]), (~ nose[34]), (~ nose[33]), (~ nose[32]), (~ nose[31]), (~ nose[30]), ((~ nose[29]) | sel[21]), ((~ nose[28]) | sel[20]), ((~ nose[27]) | sel[19]), ((~ nose[26]) | sel[18]), ((~ nose[25]) | sel[17]), ((~ nose[24]) | sel[16]), ((~ nose[23]) | sel[15]), ((~ nose[22]) | sel[14]), ((~ nose[21]) | sel[13]), ((~ nose[20]) | sel[12]), ((~ nose[19]) | sel[11]), (~ nose[18]), (~ nose[17]), (~ nose[16]), (~ nose[15]), (~ nose[14]), (~ nose[13]), (~ nose[12]), (~ nose[11]), ((~ nose[10]) | sel[10]), ((~ nose[9]) | sel[9]), ((~ nose[8]) | sel[8]), ((~ nose[7]) | sel[7]), ((~ nose[6]) | sel[6]
), ((~ nose[5]) | sel[5]), ((~ nose[4]) | sel[4]), ((~ nose[3]) | sel[3]), ((~ nose[2]) | sel[2]), ((~ nose[1]) | sel[1]), ((~ nose[0]) | sel[0])},
		StageIn = StageIn_tmp,
		StageIn_tmp = {StageOut[227:180], DFFStage[23:12], StageOut[167:60], DFFStage[11:0], StageOut[47:0], {12{1'b0}}},
		StageOut = {(({StageIn[226:216], NumeratorIn[342]} & {12{selnose[360]}}) | (prestg[227:216] & {12{(~ selnose[360])}})), (({StageIn[214:204], NumeratorIn[324]} & {12{selnose[340]}}) | (prestg[215:204] & {12{(~ selnose[340])}})), (({StageIn[202:192], NumeratorIn[306]} & {12{selnose[320]}}) | (prestg[203:192] & {12{(~ selnose[320])}})), (({StageIn[190:180], NumeratorIn[288]} & {12{selnose[300]}}) | (prestg[191:180] & {12{(~ selnose[300])}})), (({StageIn[178:168], NumeratorIn[270]} & {12{selnose[280]}}) | (prestg[179:168] & {12{(~ selnose[280])}})), (({StageIn[166:156], NumeratorIn[252]} & {12{selnose[260]}}) | (prestg[167:156] & {12{(~ selnose[260])}})), (({StageIn[154:144], NumeratorIn[234]} & {12{selnose[240]}}) | (prestg[155:144] & {12{(~ selnose[240])}})), (({StageIn[142:132], NumeratorIn[216]} & {12{selnose[220]}}) | (prestg[143:132] & {12{(~ selnose[220])}})), (({StageIn[130:120], NumeratorIn[198]} & {12{selnose[200]}}) | (prestg[131:120] & {12{(~ selnose[200])}})), (({StageIn[118:108], NumeratorIn[180]} & {12{selnose[180]}}) | (prestg[119:108] & {12{(~ selnose[180])}})), (({StageIn[106:96], NumeratorIn[162]} & {12{selnose[160]}}) | (prestg[107:96] & {12{(~ selnose[160])}})), (({StageIn[94:84], NumeratorIn[144]} & {12{selnose[140]}}) | (prestg[95:84] & {12{(~ selnose[140])}})), (({StageIn[82:72], NumeratorIn[126]} & {12{selnose[120]}}) | (prestg[83:72] & {12{(~ selnose[120])}})), (({StageIn[70:60], NumeratorIn[108]} & {12{selnose[100]}}) | (prestg[71:60] & {12{(~ selnose[100])}})), (({StageIn[58:48], NumeratorIn[90]} & {12{selnose[80]}}) | (prestg[59:48] & {12{(~ selnose[80])}})), (({StageIn[46:36], NumeratorIn[72]} & {12{selnose[60]}}) | (prestg[47:36] & {12{(~ selnose[60])}})), (({StageIn[34:24], NumeratorIn[54]} & {12{selnose[40]}}) | (prestg[35:24] & {12{(~ selnose[40])}})), (({StageIn[22:12], NumeratorIn[36]} & {12{selnose[20]}}) | (prestg[23:12] & {12{(~ selnose[20])}})), (({StageIn[10:0], NumeratorIn[18]} & {12{selnose[0]}}) | (prestg[11:0] & {12{(~ selnose[0])}}))},
		vcc_wire = 1'b1;
endmodule //divider_alt_u_div

//synthesis_resources = lut 176 reg 122 
//synopsys translate_off
`timescale 1 ps / 1 ps
//synopsys translate_on
module  divider_sign_div_unsign
	( 
	clock,
	denominator,
	numerator,
	quotient,
	remainder) /* synthesis synthesis_clearbox=1 */;
	input   clock;
	input   [10:0]  denominator;
	input   [18:0]  numerator;
	output   [18:0]  quotient;
	output   [10:0]  remainder;

	wire  [18:0]   wire_divider_quotient;
	wire  [10:0]   wire_divider_remainder;
	wire  [18:0]  norm_num;
	wire  [18:0]  protect_quotient;
	wire  [10:0]  protect_remainder;

	divider_alt_u_div   divider
	( 
	.clock(clock),
	.denominator(denominator),
	.numerator(norm_num),
	.quotient(wire_divider_quotient),
	.remainder(wire_divider_remainder));
	assign
		norm_num = numerator,
		protect_quotient = wire_divider_quotient,
		protect_remainder = wire_divider_remainder,
		quotient = protect_quotient,
		remainder = protect_remainder;
endmodule //divider_sign_div_unsign

//synthesis_resources = lut 176 reg 122 
//synopsys translate_off
`timescale 1 ps / 1 ps
//synopsys translate_on
module  divider_lpm_divide
	( 
	clock,
	denom,
	numer,
	quotient,
	remain) /* synthesis synthesis_clearbox=1 */;
	input   clock;
	input   [10:0]  denom;
	input   [18:0]  numer;
	output   [18:0]  quotient;
	output   [10:0]  remain;

	wire  [18:0]   wire_divider_quotient;
	wire  [10:0]   wire_divider_remainder;
	wire  [18:0]  numer_tmp;

	divider_sign_div_unsign   divider
	( 
	.clock(clock),
	.denominator(denom),
	.numerator(numer_tmp),
	.quotient(wire_divider_quotient),
	.remainder(wire_divider_remainder));
	assign
		numer_tmp = numer,
		quotient = wire_divider_quotient,
		remain = wire_divider_remainder;
endmodule //divider_lpm_divide
//VALID FILE


// synopsys translate_off
`timescale 1 ps / 1 ps
// synopsys translate_on
module divider (
	clock,
	denom,
	numer,
	quotient,
	remain)/* synthesis synthesis_clearbox = 1 */;

	input	  clock;
	input	[10:0]  denom;
	input	[18:0]  numer;
	output	[18:0]  quotient;
	output	[10:0]  remain;

	wire [18:0] sub_wire0;
	wire [10:0] sub_wire1;
	wire [18:0] quotient = sub_wire0[18:0];
	wire [10:0] remain = sub_wire1[10:0];

	divider_lpm_divide	divider_lpm_divide_component (
				.denom (denom),
				.clock (clock),
				.numer (numer),
				.quotient (sub_wire0),
				.remain (sub_wire1));

endmodule

// ============================================================
// CNX file retrieval info
// ============================================================
// Retrieval info: PRIVATE: INTENDED_DEVICE_FAMILY STRING "Cyclone II"
// Retrieval info: PRIVATE: PRIVATE_LPM_REMAINDERPOSITIVE STRING "TRUE"
// Retrieval info: PRIVATE: PRIVATE_MAXIMIZE_SPEED NUMERIC "6"
// Retrieval info: PRIVATE: SYNTH_WRAPPER_GEN_POSTFIX STRING "1"
// Retrieval info: PRIVATE: USING_PIPELINE NUMERIC "1"
// Retrieval info: PRIVATE: VERSION_NUMBER NUMERIC "2"
// Retrieval info: CONSTANT: LPM_DREPRESENTATION STRING "UNSIGNED"
// Retrieval info: CONSTANT: LPM_HINT STRING "MAXIMIZE_SPEED=6,LPM_REMAINDERPOSITIVE=TRUE"
// Retrieval info: CONSTANT: LPM_NREPRESENTATION STRING "UNSIGNED"
// Retrieval info: CONSTANT: LPM_PIPELINE NUMERIC "2"
// Retrieval info: CONSTANT: LPM_TYPE STRING "LPM_DIVIDE"
// Retrieval info: CONSTANT: LPM_WIDTHD NUMERIC "11"
// Retrieval info: CONSTANT: LPM_WIDTHN NUMERIC "19"
// Retrieval info: USED_PORT: clock 0 0 0 0 INPUT NODEFVAL clock
// Retrieval info: USED_PORT: denom 0 0 11 0 INPUT NODEFVAL denom[10..0]
// Retrieval info: USED_PORT: numer 0 0 19 0 INPUT NODEFVAL numer[18..0]
// Retrieval info: USED_PORT: quotient 0 0 19 0 OUTPUT NODEFVAL quotient[18..0]
// Retrieval info: USED_PORT: remain 0 0 11 0 OUTPUT NODEFVAL remain[10..0]
// Retrieval info: CONNECT: @numer 0 0 19 0 numer 0 0 19 0
// Retrieval info: CONNECT: @denom 0 0 11 0 denom 0 0 11 0
// Retrieval info: CONNECT: quotient 0 0 19 0 @quotient 0 0 19 0
// Retrieval info: CONNECT: remain 0 0 11 0 @remain 0 0 11 0
// Retrieval info: CONNECT: @clock 0 0 0 0 clock 0 0 0 0
// Retrieval info: LIBRARY: lpm lpm.lpm_components.all
// Retrieval info: GEN_FILE: TYPE_NORMAL divider.v TRUE
// Retrieval info: GEN_FILE: TYPE_NORMAL divider.inc FALSE
// Retrieval info: GEN_FILE: TYPE_NORMAL divider.cmp FALSE
// Retrieval info: GEN_FILE: TYPE_NORMAL divider.bsf FALSE
// Retrieval info: GEN_FILE: TYPE_NORMAL divider_inst.v FALSE
// Retrieval info: GEN_FILE: TYPE_NORMAL divider_bb.v FALSE
// Retrieval info: GEN_FILE: TYPE_NORMAL divider_syn.v TRUE
// Retrieval info: LIB_FILE: lpm
